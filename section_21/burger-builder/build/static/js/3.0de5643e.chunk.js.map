{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Label","label","module","exports","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.0de5643e.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css';\n\nconst Input = (props) => {\n  let inputElement = null\n  const inputClasses = [classes.InputElement]\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid)\n  }\n\n  switch (props.elementType) {\n    case ('email'):\n      inputElement = <input \n                      className={inputClasses.join(' ')} \n                      {...props.elementConfig} \n                      value={props.value} \n                      onChange={props.changed}/>\n      break;\n    case ('textarea'):\n      inputElement = <textarea \n                      className={inputClasses.join(' ')} \n                      {...props.elementConfig} \n                      value={props.value} \n                      onChange={props.changed}/>\n      break;\n    case('select'):\n    inputElement = (\n      <select \n        className={inputClasses.join(' ')}\n        value={props.value} \n        onChange={props.changed}>\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>{option.displayValue}</option>\n          ))}\n      </select>\n    )\n    break;\n    default:\n      inputElement = <input \n                      className={inputClasses.join(' ')} \n                      {...props.elementConfig} \n                      value={props.value}\n                      onChange={props.changed}/>\n      break;\n\n  }\n  return (\n  <div className={classes.Input}>\n    <label className={classes.Label}>{props.label}</label>\n    {inputElement}\n  </div>\n);}\n\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nimport classes from './CheckoutSummary.module.css';\n\nconst CheckoutSummary = (props) => (\n  <div className={classes.CheckoutSummary}>\n    <h1>We hope it tastes good!</h1>\n    <div style={{width: '100%',  margin: 'auto'}}>\n      <Burger ingredients={props.ingredients} />\n    </div>\n    <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n    <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n  </div>\n);\n\nexport default CheckoutSummary;","import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders'\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index'\nimport {updateObject, checkValidity} from '../../../shared/utility';\n\nclass ContactData extends Component {\n\n  state = {\n    orderForm: {\n      name: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Full Name'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      street: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Address'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      zipCode: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Zip Code'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5\n        },\n        valid: false,\n        touched: false\n      },\n      country: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Country'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      email: {\n        elementType: 'email',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'Email'\n        },\n        value: '',\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false\n      },\n      deliveryMethod: {\n        elementType: 'select',\n        elementConfig: {\n          options: [\n            {value: 'fastest', displayValue: 'Fastest'},\n            {value: 'cheapest', displayValue: 'Cheapest'},\n          ]\n        },\n        value: 'fastest',\n        validation: {},\n        valid: true,\n      },\n    },\n    formIsValid: false\n  }\n\n  orderHandler = (event) => {\n    event.preventDefault()\n\n    const formData = {}\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n    }\n\n    const order = {\n      ingredients: this.props.ings,\n      price: this.props.price,\n      orderData: formData,\n      userId: this.props.userId\n    }\n    \n    // Trigger dispatch action\n    this.props.onOrderBurger(order, this.props.token)\n    \n    \n  }\n  \n  inputChangedHandler = (event, inputIdentifier) => {\n   \n\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n      touched: true\n    })\n    \n    const updatedOrderForm = updateObject(this.state.orderForm, {\n      [inputIdentifier]: updatedFormElement\n    })\n    \n    let formIsValid = true;\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\n    }\n\n    this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\n  }\n\n  render () {\n    const formElementsArray = []\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      })\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input \n            key={formElement.id}\n            elementType={formElement.config.elementType} \n            elementConfig = {formElement.config.elementConfig}\n            value= {formElement.config.value} \n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n        ))}\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form=<Spinner />;\n    }\n\n    return (\n      <div className={classes.ContactData}>\n        <h4> Enter your contact data</h4>\n        {form}\n      </div>\n    )\n  }\n\n}\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport {connect} from 'react-redux';\nimport * as actions from '../../store/actions/order';\n\nclass Checkout extends Component {\n \n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  }\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace('/checkout/contact-data')\n  }\n\n  render () {\n    \n    let summary = <Redirect to=\"/\" />\n    \n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\n      summary = (\n        <div>\n        {purchasedRedirect}\n        <CheckoutSummary \n          ingredients={this.props.ings} \n          checkoutCancelled={this.checkoutCancelledHandler}\n          checkoutContinued={this.checkoutContinuedHandler}\n        />\n        <Route \n          path={this.props.match.path + '/contact-data'} \n          component={ContactData} />\n      </div>\n      )\n    }\n   \n\n    return (\n      <>\n     {summary}\n     </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased\n  }\n}\n\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}