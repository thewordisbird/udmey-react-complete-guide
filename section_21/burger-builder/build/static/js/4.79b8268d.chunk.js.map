{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","console","log","preventDefault","onAuth","switchAuthMode","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","id","config","form","formElement","loading","errorMessage","error","message","authRedirect","isAuth","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.79b8268d.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css';\n\nconst Input = (props) => {\n  let inputElement = null\n  const inputClasses = [classes.InputElement]\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid)\n  }\n\n  switch (props.elementType) {\n    case ('email'):\n      inputElement = <input \n                      className={inputClasses.join(' ')} \n                      {...props.elementConfig} \n                      value={props.value} \n                      onChange={props.changed}/>\n      break;\n    case ('textarea'):\n      inputElement = <textarea \n                      className={inputClasses.join(' ')} \n                      {...props.elementConfig} \n                      value={props.value} \n                      onChange={props.changed}/>\n      break;\n    case('select'):\n    inputElement = (\n      <select \n        className={inputClasses.join(' ')}\n        value={props.value} \n        onChange={props.changed}>\n          {props.elementConfig.options.map(option => (\n            <option key={option.value} value={option.value}>{option.displayValue}</option>\n          ))}\n      </select>\n    )\n    break;\n    default:\n      inputElement = <input \n                      className={inputClasses.join(' ')} \n                      {...props.elementConfig} \n                      value={props.value}\n                      onChange={props.changed}/>\n      break;\n\n  }\n  return (\n  <div className={classes.Input}>\n    <label className={classes.Label}>{props.label}</label>\n    {inputElement}\n  </div>\n);}\n\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport classes from './Auth.module.css'\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport { Redirect } from 'react-router-dom';\n\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'text',\n          placeholder: 'E-Mail Address'\n        },\n        value: '',\n        validation: {\n          required: true,\n          isEmail: true\n        },\n        valid: false,\n        touched: false\n      },\n      password: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'password',\n          placeholder: 'PAssword'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    },\n    isSignup: true\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath) {\n      this.props.onSetAuthRedirectPath()\n    }\n  }\n\n  inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched: true\n      })\n    });\n    this.setState({controls: updatedControls})\n  }\n\n  submitHandler = (event) => {\n    console.log('[Auth, submitHandler]')\n    event.preventDefault();\n    this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n  }\n\n  switchAuthMode = () => {\n    console.log('[Auth, switchAuthMode]')\n    this.setState(prevState => (\n      {\n        ...prevState,\n        isSignup: !prevState.isSignup\n      }\n    ))\n  }\n  render () {\n    const formElementsArray = []\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      })\n    }\n    let form = formElementsArray.map(formElement => (\n      <Input\n        key={formElementsArray.id}\n        elementType={formElement.config.elementType} \n        elementConfig = {formElement.config.elementConfig}\n        value= {formElement.config.value} \n        invalid={!formElement.config.valid}\n        shouldValidate={formElement.config.validation}\n        touched={formElement.config.touched}\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n        />\n     \n    ))\n\n    if (this.props.loading) {\n      form = <Spinner />\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = (\n        <p>{this.props.error.message}</p>\n      )\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuth) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\n    }\n\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        <h1>{!this.state.isSignup ? \"Sign In\" : \"Register\"}</h1>\n        {errorMessage}\n        <form onSubmit={this.submitHandler}>\n          {form}\n        <Button btnType=\"Success\">Submit</Button>\n        </form>\n        <Button btnType=\"Danger\" clicked={this.switchAuthMode}>SWITCH TO {this.state.isSignup ? \"Sign In\" :\"Register\"}</Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: !!state.auth.token,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}